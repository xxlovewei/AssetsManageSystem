<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
	default-lazy-init="true">


	<!-- 配置shiro session 的一个管理器 -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"></bean>
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="name" value="SHRIOSESSIONID" />
		<property name="httpOnly" value="true" />
		<!-- 设置cookies过期时间,-1为关闭浏览器就过期 -->
		<property name="maxAge" value="18000" />
	</bean>

	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
	<!-- <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler"> 
		设置session的失效扫描间隔，单位为毫秒 <property name="sessionValidationInterval" value="100000" 
		/> 随后还需要定义有一个会话管理器的程序类的引用 <property name="sessionManager" ref="sessionManager" 
		/> </bean> -->

	<!-- 用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO" ref="sessionDAO"></property>
		<!--Session 超时检测时间 单位：毫秒 -->
		<property name="sessionValidationInterval" value="10000" />
		<!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
		<property name="globalSessionTimeout" value="-1000" />
		<!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
		<property name="deleteInvalidSessions" value="true" />

		<!-- 定义要使用的无效的Session定时调度器 -->
		<!-- <property name="sessionValidationScheduler" ref="sessionValidationScheduler" 
			/> -->
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />

		<!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<property name="sessionIdCookieEnabled" value="true" />
		<!-- <property name="sessionListeners"> <list> <ref bean="simpleShiroSessionListener" 
			/> </list> </property> -->
	</bean>


	<!-- 用户授权信息Cache -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

	<!-- 項目自定义的Realm -->
	<bean id="myShiroRealm" class=" com.dt.core.common.shiro.ShiroDbRealm">
		<property name="cacheManager" ref="cacheManager" />
	</bean>


	<!-- 配置SecurityManager的管理 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myShiroRealm" />
		<!-- shiro缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- shiro session管理器 -->
		<property name="sessionManager" ref="sessionManager"></property>
	</bean>


	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 必须 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 没有登录的用户请求需要登录的页面时自动跳转到登录页面，可配置也可不配置 -->
		<property name="loginUrl" value="/dt/console/#/login" />
		<!-- 登录成功默认跳转页面，不配置则跳转至”/”，一般可以不配置，直接通过代码进行处理 -->
		<property name="successUrl" value="/dt/console/" />
		<!-- 没有权限默认跳转的页面 -->
		<property name="unauthorizedUrl" value="/error.jhtml" />
		<!-- anon 不需要认证, authc 需要认证, user 验证通过或RememberMe登录的都可以 -->
		<property name="filters">
			<map>
				<entry key="authc">
					<bean class="com.dt.core.common.shiro.MyAuthenticationFilter">
						<property name="rememberMeParam" value="rememberMe" />
					</bean>
				</entry>
				<entry key="perms">
					<bean class="com.dt.core.common.shiro.UrlPermissionsFilter" />
				</entry>
				<entry key="logout">
					<bean class="com.dt.core.common.shiro.SystemLogoutFilter" />
				</entry>
			</map>
		</property>
	</bean>

	<!-- 权限资源配置 -->
	<bean id="chainDefinitionSectionMetaSource" class="com.dt.core.common.shiro.SimpleFilterChainDefinitionsService">
		<property name="filterChainDefinitions">
			<value>
				/api/user/login.do = anon
				/api/user/logout.do = logout
				/console/** = anon
				/wx/** = anon
				/wx3/** = anon
				/public/** = anon
				/api/** = authc,perms  
				/** = authc   
				<!-- /** = anon  -->
			</value>
		</property>
	</bean>



	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>


	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>  