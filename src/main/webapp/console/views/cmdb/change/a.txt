/*******************************************************************************
 * Copyright 2017 Bstek
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.bstek.uflo.process.node;

import java.util.List;

import com.dt.core.dao.RcdSet;
import com.dt.module.db.DB;
import org.hibernate.FlushMode;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import com.bstek.uflo.env.Context;
import com.bstek.uflo.expr.ExpressionContext;
import com.bstek.uflo.model.ProcessDefinition;
import com.bstek.uflo.model.ProcessInstance;
import com.bstek.uflo.model.ProcessInstanceState;
import com.bstek.uflo.model.variable.Variable;
import com.bstek.uflo.query.ProcessVariableQuery;
import com.bstek.uflo.service.ProcessService;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author Jacky.gao
 * @since 2013年7月31日
 */
public  class JoinNode extends Node {
	private static final long serialVersionUID = 6808697583212585654L;
	private int multiplicity;
	private int percentMultiplicity;
	
	@SuppressWarnings("unchecked")
	@Override
	public synchronized boolean enter(Context context, ProcessInstance processInstance) {
		Session session=context.getSession();
		processInstance.setState(ProcessInstanceState.End);
		ProcessService processService=context.getProcessService();
		ExpressionContext expressionContext=context.getExpressionContext();
		expressionContext.moveContextToParent(processInstance);
		expressionContext.removeContext(processInstance);
		long parentId=processInstance.getParentId();
		
		ProcessInstance parentProcessInstance=processService.getProcessInstanceById(parentId);
		createActivityHistory(context, parentProcessInstance);
		doEnterEventHandler(context, parentProcessInstance);
		
		ProcessVariableQuery query=processService.createProcessVariableQuery();
		query.processInstanceId(processInstance.getId());
		for(Variable var:query.list()){
			var.setProcessInstanceId(parentId);
			session.update(var);
		}
		//Transaction tx1 = session.beginTransaction();
		session.delete(processInstance);
		session.flush();;
	//	tx1.commit(); //
		List<ProcessInstance> t=session.createCriteria(ProcessInstance.class).add(Restrictions.eq("id", processInstance.getId())).list();
		System.out.println("11111 "+t.size());
		//session.getSessionFactory().getCurrentSession().
	//	session.getFlushMode();
		List<ProcessInstance> noneCompleteProcessInstances=session.createCriteria(ProcessInstance.class).add(Restrictions.eq("parentId", parentId)).list();
		int parallelCount=processInstance.getParallelInstanceCount();
		int completedCount=parallelCount-noneCompleteProcessInstances.size();
		ProcessDefinition pd=processService.getProcessById(processInstance.getProcessId());
		System.out.println("#########"+session.getFlushMode());
		System.out.println("parallelCount"+parallelCount);
		System.out.println("noneCompleteProcessInstances.size()"+noneCompleteProcessInstances.size());
		System.out.println("completedCount"+completedCount);
		System.out.println("multiplicity"+multiplicity);
		System.out.println("percentMultiplicity"+percentMultiplicity);
		for(int i=0;i<noneCompleteProcessInstances.size();i++){
			System.out.println(i+" "+noneCompleteProcessInstances.get(i).getId());
			System.out.println(i+" "+noneCompleteProcessInstances.get(i).getId());
			System.out.println(i+" "+noneCompleteProcessInstances.get(i).getCurrentTask());
			System.out.println(i+" "+noneCompleteProcessInstances.get(i).getCurrentNode());
			System.out.println(i+" "+noneCompleteProcessInstances.get(i).getParallelInstanceCount());
			System.out.println(i+" "+noneCompleteProcessInstances.get(i).getParentId());
		}
		if(multiplicity>0){
			System.out.println("go to multiplicity");
			if(completedCount>=multiplicity){
				for(ProcessInstance pi:noneCompleteProcessInstances){
					Node node=pd.getNode(pi.getCurrentNode());
					node.cancel(context, processInstance);
					session.createQuery("delete "+Variable.class.getName()+" where processInstanceId=:piId").setLong("piId", pi.getId()).executeUpdate();
					processService.deleteProcessInstance(pi);
					node.completeActivityHistory(context, pi,null);
					expressionContext.removeContext(pi);
				}
				return true;
			}
		}else if(percentMultiplicity>0){
			System.out.println("go to percentMultiplicity");
			double percent=Double.valueOf(percentMultiplicity)/Double.valueOf(100);
			double alreadyCompletedPercent=(Double.valueOf(completedCount)/Double.valueOf(parallelCount));
			if(alreadyCompletedPercent>=percent){
				for(ProcessInstance pi:noneCompleteProcessInstances){
					Node node=pd.getNode(pi.getCurrentNode());
					node.cancel(context, pi);
					session.createQuery("delete "+Variable.class.getName()+" where processInstanceId=:piId").setLong("piId", pi.getId()).executeUpdate();
					processService.deleteProcessInstance(pi);
					node.completeActivityHistory(context, pi,null);
					expressionContext.removeContext(pi);
				}
				return true;
			}
		}else if(noneCompleteProcessInstances.size()==0){
			System.out.println("go to noneCompleteProcessInstances");
			return true;
		}else{
			System.out.println("unknow");
		}
		return false;
	}

	@Override
	public String leave(Context context, ProcessInstance processInstance,String flowName) {
		Session session=context.getSession();
		long parentProcessInstanceId=processInstance.getParentId();
		ProcessInstance parentProcessInstance=(ProcessInstance)session.createCriteria(ProcessInstance.class).add(Restrictions.eq("id", parentProcessInstanceId)).uniqueResult();
		ProcessDefinition pd=context.getProcessService().getProcessById(processInstance.getProcessId());
		Node node=pd.getNode(parentProcessInstance.getCurrentNode());
		node.doLeaveEventHandler(context, parentProcessInstance);
		node.completeActivityHistory(context, parentProcessInstance, flowName);
		parentProcessInstance.setCurrentNode(getName());
		return leaveNode(context, parentProcessInstance, flowName);
	}
	@Override
	public void cancel(Context context, ProcessInstance processInstance) {
	}

	@Override
	public NodeType getType() {
		return NodeType.Join;
	}
	
	public int getMultiplicity() {
		return multiplicity;
	}

	public void setMultiplicity(int multiplicity) {
		this.multiplicity = multiplicity;
	}

	public int getPercentMultiplicity() {
		return percentMultiplicity;
	}

	public void setPercentMultiplicity(int percentMultiplicity) {
		this.percentMultiplicity = percentMultiplicity;
	}
}
